trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  mavenOptions: '-Xmx3072m'
  jdkVersion: '1.11'
  jdkArchitecture: 'x64'
  mavenPomFile: 'pom.xml'

steps:
# Cache Maven dependencies
- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | $(Build.SourcesDirectory)/$(mavenPomFile)'
    restoreKeys: |
      maven | "$(Agent.OS)"
    path: ~/.m2/repository
  displayName: 'Cache Maven dependencies'

# Install Dependency Check for Maven (only if not cached)
- task: Cache@2
  inputs:
    key: 'dependency-check | "$(Agent.OS)"'
    restoreKeys: |
      dependency-check | "$(Agent.OS)"
    path: /opt/dependency-check
  displayName: 'Cache Dependency Check installation'

# Install Java JDK 11
- script: |
    sudo apt-get update
    sudo apt-get install openjdk-11-jdk -y
    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
  displayName: 'Install Java JDK 11'

# Maven build and test with options
- task: Maven@3
  inputs:
    mavenPomFile: $(mavenPomFile)
    mavenOptions: $(mavenOptions)
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: $(jdkVersion)
    jdkArchitectureOption: $(jdkArchitecture)
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

# Ensure Artifact Staging Directory exists
- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)
  displayName: 'Ensure Artifact Staging Directory Exists'

# Run OWASP Dependency Check (for Maven projects)
- task: dependency-check-build-task@6
  inputs:
    projectName: 'Java-Maven'
    scanPath: '$(Build.SourcesDirectory)'
    format: 'HTML'
    outputFilePath: '$(Build.ArtifactStagingDirectory)/dependency-check-report.html'
    uploadReports: true
    nvdApiKey: $(NVD_API_KEY)
    useLocalNvd: true
  displayName: 'Run OWASP Dependency Check Scan'

# Snyk Security Scan
- task: SnykSecurityScan@1
  inputs:
    serviceConnectionEndpoint: 'CICD'
    testType: 'code'
    fileOrDirectory: '.'   # Ensures Snyk scans the entire repo
    monitorWhen: 'always'
    failOnIssues: false
    outputFormat: 'json'
    outputFilePath: '$(Build.ArtifactStagingDirectory)/snyk-report.json'

# Upload Dependency Check report to DefectDojo
- script: |
    if [ -f "$(Build.ArtifactStagingDirectory)/dependency-check-report.html" ]; then
      curl -X POST -H "Authorization: Token $(DEFECTDOJO_API_KEY)" \
        -F "file=@$(Build.ArtifactStagingDirectory)/dependency-check-report.html" \
        -F "scan_type=dependency-check" -F "engagement=$(DEFECTDOJO_ENGAGEMENT_ID)" \
        -F "product=$(DEFECTDOJO_PRODUCT_ID)" $(DEFECTDOJO_API_URL)/api/v2/import-dependency-check/
    else
      echo "Error: Dependency Check report not found at $(Build.ArtifactStagingDirectory)/dependency-check-report.html"
      exit 1
    fi
  displayName: 'Upload Dependency Check Report to DefectDojo'
